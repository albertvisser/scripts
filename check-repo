#! /usr/bin/env python3
"""examine uncommitted changes in source repository
"""
import sys
import pathlib
import argparse
import subprocess
import PyQt5.QtWidgets as qtw
import PyQt5.QtGui as gui
## import PyQt5.QtCore as core
import PyQt5.Qsci as sci  # scintilla
import settings

HOME = pathlib.Path.home()
root = HOME / 'projects'


class DiffViewDialog(qtw.QDialog):
    """dialoog voor het tonen van de diff output
    """
    def __init__(self, parent, title='', caption='', data='', size=(600, 400)):
        "create a window with a scintilla text widget and an ok button"
        self._parent = parent
        super().__init__(parent)
        self.setWindowTitle(title)
        ## self.setWindowIcon(self._parent._parent.appicon)
        self.resize(size[0], size[1])
        vbox = qtw.QVBoxLayout()
        hbox = qtw.QHBoxLayout()
        hbox.addWidget(qtw.QLabel(caption, self))
        vbox.addLayout(hbox)
        hbox = qtw.QHBoxLayout()
        self.text = sci.QsciScintilla(self)
        self.setup_text()
        self.text.setText(data)
        self.text.setReadOnly(True)
        hbox.addWidget(self.text)
        vbox.addLayout(hbox)
        hbox = qtw.QHBoxLayout()
        ok_button = qtw.QPushButton('&Ok', self)
        ok_button.clicked.connect(self.close)
        ok_button.setDefault(True)
        hbox.addStretch()
        hbox.addWidget(ok_button)
        hbox.addStretch()
        vbox.addLayout(hbox)
        self.setLayout(vbox)
        do = qtw.QAction('Done', self)
        do.triggered.connect(self.close)
        do.setShortcut('Esc')
        self.addAction(do)
        ## do.setShortCut(core.Qt.Key_Escape)

    def setup_text(self):
        "define the scintilla widget's properties"
        # Set the default font
        font = gui.QFont()
        font.setFamily('Courier')
        font.setFixedPitch(True)
        font.setPointSize(10)
        self.text.setFont(font)
        self.text.setMarginsFont(font)

        # Margin 0 is used for line numbers
        fontmetrics = gui.QFontMetrics(font)
        self.text.setMarginsFont(font)
        self.text.setMarginWidth(0, fontmetrics.width("00000"))
        self.text.setMarginLineNumbers(0, True)
        self.text.setMarginsBackgroundColor(gui.QColor("#cccccc"))

        # Enable brace matching, auto-indent, code-folding
        self.text.setBraceMatching(sci.QsciScintilla.SloppyBraceMatch)
        self.text.setAutoIndent(True)
        self.text.setFolding(sci.QsciScintilla.PlainFoldStyle)

        # Current line visible with special background color
        self.text.setCaretLineVisible(True)
        self.text.setCaretLineBackgroundColor(gui.QColor("#ffe4e4"))

        # Set HTML lexer
        lexer = sci.QsciLexerDiff()
        lexer.setDefaultFont(font)
        self.text.setLexer(lexer)


class Gui(qtw.QWidget):
    """User interface"""
    def __init__(self, path, repotype):
        self.path = path
        self.repotype = repotype
        self.filelist = self.get_repofiles()

        project = path.stem
        super().__init__()
        self.title = 'Uncommitted changes for `{}`'.format(project)
        self.setWindowTitle(self.title)
        self.setWindowIcon(gui.QIcon('/home/albert/.icons/task.png'))
        vbox = qtw.QVBoxLayout()

        hbox = qtw.QHBoxLayout()
        hbox.addWidget(qtw.QLabel('Branch:', self))
        self.cb_branch = qtw.QComboBox(self)
        self.cb_branch.setEditable(True)
        self.update_branches()
        hbox.addWidget(self.cb_branch)

        btn = qtw.QPushButton('Create', self)
        btn.clicked.connect(self.create_branch)
        hbox.addWidget(btn)
        btn = qtw.QPushButton('Switch To', self)
        btn.clicked.connect(self.switch2branch)
        hbox.addWidget(btn)
        btn = qtw.QPushButton('Stash', self)
        btn.setMenu(self.setup_stashmenu())
        hbox.addWidget(btn)
        btn = qtw.QPushButton('Merge', self)
        btn.clicked.connect(self.merge_branch)
        hbox.addWidget(btn)
        btn = qtw.QPushButton('Delete', self)
        btn.clicked.connect(self.delete_branch)
        hbox.addWidget(btn)
        hbox.addStretch()
        vbox.addLayout(hbox)

        hbox = qtw.QHBoxLayout()
        self.list = qtw.QListWidget(self)
        self.list.setSelectionMode(qtw.QAbstractItemView.ExtendedSelection)
        self.populate_frame()
        hbox.addWidget(self.list)

        vbox2 = qtw.QVBoxLayout()
        vbox2.addSpacing(10)
        vbox2.addWidget(qtw.QLabel('Select file(s) and', self))
        btn = qtw.QPushButton('&Edit', self)
        btn.clicked.connect(self.edit_selected)
        vbox2.addWidget(btn)
        btn = qtw.QPushButton('Show &Diff', self)
        btn.clicked.connect(self.diff_selected)
        vbox2.addWidget(btn)
        btn = qtw.QPushButton('&Lint', self)
        btn.clicked.connect(self.lint_selected)
        vbox2.addWidget(btn)
        btn = qtw.QPushButton('&Blame', self)
        btn.clicked.connect(self.annotate)
        vbox2.addWidget(btn)
        btn = qtw.QPushButton('&Commit', self)
        btn.clicked.connect(self.commit_selected)
        vbox2.addWidget(btn)
        btn = qtw.QPushButton('Re&vert', self)
        btn.clicked.connect(self.revert_selected)
        vbox2.addWidget(btn)
        btn = qtw.QPushButton('Start &Tracking', self)
        btn.clicked.connect(self.add_new)
        vbox2.addWidget(btn)
        btn = qtw.QPushButton('&Stop Tracking', self)
        btn.clicked.connect(self.forget)
        vbox2.addWidget(btn)
        btn = qtw.QPushButton('Add to &Ignore list', self)
        btn.clicked.connect(self.add_ignore)
        vbox2.addWidget(btn)
        vbox2.addWidget(qtw.QLabel('', self))
        hbox.addLayout(vbox2)
        vbox.addLayout(hbox)

        hbox = qtw.QHBoxLayout()
        hbox.addStretch()
        hbox.addWidget(qtw.QLabel('Or', self))
        btn = qtw.QPushButton('Di&ff all Files', self)
        btn.clicked.connect(self.diff_all)
        hbox.addWidget(btn)
        btn = qtw.QPushButton('Li&nt all Files', self)
        btn.clicked.connect(self.lint_all)
        hbox.addWidget(btn)
        btn = qtw.QPushButton('Commit &All changes', self)
        btn.clicked.connect(self.commit_all)
        hbox.addWidget(btn)
        btn = qtw.QPushButton('&Recheck repo', self)
        btn.clicked.connect(self.refresh_frame)
        hbox.addWidget(btn)
        btn = qtw.QPushButton('View &History', self)
        btn.clicked.connect(self.view_repo)
        hbox.addWidget(btn)
        btn = qtw.QPushButton('&Quit', self)
        btn.clicked.connect(self.close)
        hbox.addWidget(btn)
        hbox.addStretch()
        vbox.addLayout(hbox)

        self.setLayout(vbox)

        do = qtw.QAction('Done', self)
        do.triggered.connect(self.close)
        do.setShortcut('Ctrl+Q')
        self.addAction(do)
        # start assuming Meld is present
        self.got_meld = True

    def get_repofiles(self):
        """return results of "status" command -- list uncommitted / untracked files
        """
        command = [self.repotype, 'status']
        if self.repotype == 'git':
            command.append('--short')
        result = subprocess.run(command, stdout=subprocess.PIPE, cwd=str(self.path))
        return [x for x in str(result.stdout, encoding='utf-8').split('\n') if x]

    def populate_frame(self):
        """(re)populate list"""
        self.list.clear()
        for name in self.filelist:
            self.list.addItem(name)
        self.list.setCurrentRow(0)

    def get_selected_files(self):
        """get a list of the selected filenames"""
        return [item.text().split(None, 1) for item in self.list.selectedItems()]

    def edit_selected(self):
        """Open selected files in a text editor"""
        command = [y for x, y in self.get_selected_files()]
        # command.insert(0, 'SciTE')
        command[:0] = ['gnome-terminal', '--profile', 'Code Editor Shell', '--', 'vi']
        ## subprocess.Popen(command, cwd=str(self.path))  # don't wait for editor to close
        subprocess.run(command, cwd=str(self.path))
        self.refresh_frame()

    def diff_all(self):
        """show diff for all tracked files
        """
        command = ['meld', '.']
        if self.got_meld:
            try:
                result = subprocess.run(command, cwd=str(self.path))
            except OSError:
            ## if result.returncode:
                self.got_meld = False
        if not self.got_meld:
            qtw.QMessageBox.information(self, self.title, 'Sorry, not possible '
                                                          'at this time - Meld not installed')

    def diff_selected(self):
        """show selected files in diff view"""
        filelist = self.get_selected_files()
        filenames = []
        for letter, name in filelist:
            if letter in ('?', '??'):
                qtw.QMessageBox.information(self, self.title, name + ' not tracked')
            else:
                filenames.append(name)
        if self.got_meld:
            for name in filenames:
                command = ['meld', name]
                try:
                    result = subprocess.run(command, cwd=str(self.path))
                except OSError:
                ## if result.returncode:
                    self.got_meld = False
                    break
        if not self.got_meld:
            if filenames:
                command = [self.repotype, 'diff'] + filenames
                result = subprocess.run(command, stdout=subprocess.PIPE, cwd=str(self.path))
                text = str(result.stdout, encoding='utf-8')
                caption = 'Show diffs for: ' + ', '.join(filenames)
                DiffViewDialog(self, self.title, caption, text).exec_()

    def add_ignore(self):
        """add selected file to ignore list"""
        filelist = self.get_selected_files()
        filenames = []
        for letter, name in filelist:
            if letter in ('?', '??'):
                filenames.append(name)
            else:
                qtw.QMessageBox.information(self, self.title, name + ' already tracked')
        if filenames:
            fname = '.hgignore' if self.repotype == '.hg' else '.gitignore'
            fname = self.path / fname
            with fname.open('a') as _out:
                for name in filenames:
                    _out.write(name)
            self.refresh_frame()
        ## qtw.QMessageBox.information(self, self.title, 'Added selected files to ignore list.')

    def add_new(self):
        """add selected file(s) to the tracked list"""
        filenames = [y for x, y in self.get_selected_files()]
        command = [self.repotype, 'add'] + filenames
        subprocess.run(command, cwd=str(self.path))
        self.refresh_frame()

    def forget(self):
        """stop tracking selected file(s)"""
        commands = {'hg': ['hg', 'forget'], 'git': ['git', 'rm', '--cached']}
        filenames = [y for x, y in self.get_selected_files()]
        command = commands[self.repotype] + filenames
        subprocess.run(command, cwd=str(self.path))
        self.refresh_frame()

    def refresh_frame(self):
        """recheck repository and update list"""
        self.filelist = self.get_repofiles()
        self.populate_frame()

    def commit_all(self):
        """hg commit uitvoeren - vraag om commit message"""
        message, ok = qtw.QInputDialog.getText(self, self.title,
                                               'Enter a commit message:')
        if ok:
            if self.repotype == 'git':
                command = ['git', 'commit', '-a', '-m', message]
            else:
                command = ['hg', 'commit', '-m', message]
            subprocess.run(command, cwd=str(self.path))
            self.refresh_frame()

    def commit_selected(self):
        """hg commit <selected files> uitvoeren - vraag om commit message"""
        ## filenames = [y for x, y in self.get_selected_files()]
        filelist = self.get_selected_files()
        filenames = []
        for letter, name in filelist:
            if letter in ('?', '??'):
                qtw.QMessageBox.information(self, self.title, name + ' not tracked')
            else:
                filenames.append(name)
        if filenames:
            message, ok = qtw.QInputDialog.getText(self, self.title,
                                                   'Enter a commit message:')
            if ok:
                if self.repotype == 'git':
                    command = ['git', 'add'] + filenames
                    # FIXME: moet hier niet nog een subprocess.run tussen of zo?
                command = [self.repotype, 'commit'] + filenames + ['-m', message]
                subprocess.run(command, cwd=str(self.path))
                self.refresh_frame()

    def revert_selected(self):
        """hg revert <selected files> uitvoeren
        """
        print('in revert method')
        filelist = self.get_selected_files()
        filenames = []
        for letter, name in filelist:
            if letter in ('?', '??'):
                qtw.QMessageBox.information(self, self.title, name + ' not tracked')
            else:
                filenames.append(name)
        if filenames:
            if self.repotype == 'git':
                qtw.QMessageBox.information(self, self.title, ' not implemented')
                # command = ['git', 'revert'] + filenames
            command = [self.repotype, 'revert'] + filenames
            subprocess.run(command, cwd=str(self.path))
            print('command completed')
            self.refresh_frame()

    def lint_selected(self):
        """execute permissive linting on selected files
        """
        filelist = self.get_selected_files()
        filelist = [name for letter, name in filelist if letter not in ('?', '??')]
        if filelist:
            mode = '-f' if len(filelist) == 1 else '-l'
            command = ['lintergui', '-m', 'permissive', mode] + filelist
            subprocess.run(command, cwd=str(self.path))
        else:
            qtw.QMessageBox.information(self, self.title, 'No tracked files selected')

    def lint_all(self):
        """execute permissive linting on all files in repository
        """
        subprocess.run(['lintergui', '-m', 'permissive', '-d', '.'])

    def annotate(self):
        """show selected files in annotated view"""
        filelist = self.get_selected_files()
        filenames = []
        for letter, name in filelist:
            if letter in ('?', '??'):
                qtw.QMessageBox.information(self, self.title,
                                            name + ' not tracked')
            else:
                filenames.append(name)
        if filenames:
            command = [self.repotype, 'blame'] + filenames
            result = subprocess.run(command, stdout=subprocess.PIPE, cwd=str(self.path))
            text = str(result.stdout, encoding='utf-8')
            caption = 'Show annotations for: ' + ', '.join(filenames)
            DiffViewDialog(self, self.title, caption, text).exec_()

    def view_repo(self):
        """execute hg view"""
        command = {'hg': ['hg', 'view'], 'git': ['gitg']}[self.repotype]
        result = subprocess.run(command, stdout=subprocess.PIPE, cwd=str(self.path))

    def update_branches(self):
        """build a list of branches and update combobox
        """
        stdout, stderr = self.run_and_capture(['git', 'branch'])
        current, branches = 0, []
        for ix, item in enumerate(stdout):
            test = item.split(None, 1)
            branches.append(test[-1])
            if len(test) > 1 and test[0] == '*':
                current = ix
        self.cb_branch.clear()
        self.cb_branch.addItems(branches)
        self.cb_branch.setCurrentIndex(current)

    def create_branch(self):
        """create a new branch
        """
        branch_name = self.cb_branch.currentText()
        self.run_and_report(['git', 'branch', branch_name])
        self.update_branches()

    def switch2branch(self):
        """switch to the chosen branch
        """
        branch_name = self.cb_branch.currentText()
        self.run_and_report(['git', 'checkout', branch_name])
        self.update_branches()

    def merge_branch(self):
        """merge the chosen brach with the current
        """
        branch_name = self.cb_branch.currentText()
        self.run_and_report(['git', 'merge', branch_name])
        self.update_branches()

    def delete_branch(self):
        """delete the chosen branch
        """
        branch_name = self.cb_branch.currentText()
        self.run_and_report(['git', 'branch', '-d', branch_name])
        # als de branch verwijderd kan worden krijg je alleen een melding in de stdout
        self.update_branches()

    def setup_stashmenu(self):
        """define popup menu with options to create and retrieve stashes
        """
        menu = qtw.QMenu()
        for label, callback in (('&New Stash', self.stash_push),
                                ('&Apply Stash', self.stash_pop),
                                ('&Remove Stash', self.stash_kill)):
            action = qtw.QAction(label, self)
            action.triggered.connect(callback)
            menu.addAction(action)
        return menu

    def stash_push(self):
        "create a new stash on the current branch"
        qtw.QMessageBox.information(self, '', 'create stash')
        self.run_and_report(['git', 'stash', 'push'])

    def select_stash(self):
        """show popup with list of current stashes; return the selected one
        """
        stashes, stderr = self.run_and_capture(['git', 'stash', 'list'])
        if not stashes:
            qtw.QMessageBox.information(self, self.title, 'No stashes found')
            return ''
        stash, ok = qtw.QInputDialog.getItem(self, self.title, 'select a stash from the list',
                                             stashes)
        stashid = stash.split(': ')[0] if ok else ''
        return stashid

    def stash_pop(self):
        "apply a stash to the current branch"
        stash_id = self.select_stash()
        if stash_id:
            self.run_and_report(['git', 'stash', 'apply', stash_id])

    def stash_kill(self):
        "delete a shash"
        stash_id = self.select_stash()
        if stash_id:
            self.run_and_report(['git', 'stash', 'drop', stash_id])

    def just_run(self, command_list):
        "shortcut for call to subprocess (no interest in result"
        subprocess.run(command_list, cwd=str(self.path))

    def run_and_report(self, command_list):
        "shortcut for call to subprocess (reports results from stdout and stderr)"
        result = subprocess.run(command_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                cwd=str(self.path))
        if result.stdout is not None:
            text = str(result.stdout, encoding='utf-8').strip('\n')
            if text:
                qtw.QMessageBox.information(self, self.title, text)
        if result.stderr is not None:
            text = str(result.stderr, encoding='utf-8').strip('\n')
            if text:
                qtw.QMessageBox.warning(self, self.title, text)

    def run_and_capture(self, command_list):
        "shortcut for call to subprocess (returns stdout and stderr as lists)"
        result = subprocess.run(command_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                cwd=str(self.path))
        ret1, ret2 = [], []
        if result.stdout is not None:
            ret1 = [x for x in str(result.stdout, encoding='utf-8').split('\n') if x]
        if result.stderr is not None:
            ret2 = [x for x in str(result.stderr, encoding='utf-8').split('\n') if x]
        return ret1, ret2


def main(args):
    """do the thing"""
    repotype = ''
    if not args.project:
        args.project = '.'
    if args.project == '.':
        path = pathlib.Path.cwd()  # .resolve()
    elif args.project == 'bitbucket':  # in ('bitbucket', 'magiokisnl'):
        path = HOME / 'www' / args.project
    elif args.project in settings.private_repos:
        path = HOME / settings.private_repos[args.project]
    elif args.project in settings.private_repos.values():
        path = HOME / args.project
    else:
        path = root / args.project
    test = path / '.git'
    if test.exists():
        repotype = 'git'
    else:
        test = path / '.hg'
        if test.exists():
            repotype = 'hg'
    if not repotype:
        return args.project + ' is not a repository'
    app = qtw.QApplication(sys.argv)
    win = Gui(path, repotype)
    win.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('project', help="name of a software project", nargs='?',
                        default="")
    result = main(parser.parse_args())
    if result:
        print(result)
